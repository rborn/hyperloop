/**
 * Copyright (c) 2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 * This generated code and related technologies are covered by patents
 * or patents pending by Appcelerator, Inc.
 */

// WARNING: this file is generated and will be overwritten
// Generated on <%=new Date%>

@import JavaScriptCore;
#import <hyperloop.h>

/**
 * JSC implementation for struct <%-name%>
 */
#import "<%=filename%>.h"


JSClassDefinition ClassDefinitionFor<%-name%>;
JSClassDefinition ClassDefinitionFor<%-name%>Constructor;
JSClassRef <%-name%>ClassDef;
JSClassRef <%-name%>ClassDefForConstructor;


<% entry.fields && entry.fields.forEach(function(property) {
    var get_code = makeGetProperty(state, object, property, property.name, 'result', varname),
        set_code = makeSetProperty(state, object, property, property.name, varname, 'argumentCount');
-%>
/**
 * <%-varname%>-><%=property.name%>
 */
JSValueRef Get<%=: property.name | capitalize %>For<%-name%> (JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef* exception)
{
    <%=instanceName%> <%-varname%> = (<%=instanceName%>)HyperloopGetPrivateObjectAsPointer(object);
    <%-indentify(get_code,'    ')%>
}

/**
 * <%-varname%>-><%=property.name%> = value
 */
bool Set<%=: property.name | capitalize %>For<%-name%> (JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef value, JSValueRef* exception)
{
    <%=instanceName%> <%-varname%> = (<%=instanceName%>)HyperloopGetPrivateObjectAsPointer(object);
    <%-indentify(set_code,'    ')%>
    return true;
}
<% }) -%>

/**
 * generic conversion from native object representation to JS string
 */
JSValueRef toStringFor<%-name%> (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
    return HyperloopToString(ctx, @"<%-simpleType%>");
}

static JSStaticValue StaticValueArrayFor<%-name%> [] = {
<% entry.fields && entry.fields.forEach(function(property) { -%>
    { "<%=property.name%>", Get<%=: property.name | capitalize %>For<%-name%>, Set<%=: property.name | capitalize %>For<%-name%>, kJSPropertyAttributeNone },
<% }) -%>
    { 0, 0, 0, 0 }
};

static JSStaticFunction StaticFunctionArrayFor<%-name%> [] = {
    { "toString", toStringFor<%-name%>, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontEnum | kJSPropertyAttributeDontDelete },
    { 0, 0, 0 }
};

/**
 * called when the JS object is ready to be garbage collected
 */
void FinalizerFor<%-name%> (JSObjectRef object)
{
<%  if (!assign) { -%>
    void *p = HyperloopGetPrivateObjectAsPointer(object);
    if (p!=NULL)
    {
        free(p);
        p = NULL;
    }
<% } -%>
HyperloopDestroyPrivateObject(object);
}

/**
 * called to get the JSClassRef for <%-name%> constructor class
 */
JSClassRef CreateClassFor<%-name%>Constructor ()
{
    static bool init;
    if (!init)
    {
        init = true;

        ClassDefinitionFor<%-name%>Constructor = kJSClassDefinitionEmpty;
        ClassDefinitionFor<%-name%>Constructor.className = "<%-simpleType%>Constructor";

        <%-name%>ClassDefForConstructor = JSClassCreate(&ClassDefinitionFor<%-name%>Constructor);

        JSClassRetain(<%-name%>ClassDefForConstructor);
    }
    return <%-name%>ClassDefForConstructor;
}

/**
 * called to get the JSClassRef for <%-name%> class
 */
JSClassRef CreateClassFor<%-name%> ()
{
    static bool init;
    if (!init)
    {
        init = true;

        ClassDefinitionFor<%-name%> = kJSClassDefinitionEmpty;
        ClassDefinitionFor<%-name%>.staticValues = StaticValueArrayFor<%-name%>;
        ClassDefinitionFor<%-name%>.staticFunctions = StaticFunctionArrayFor<%-name%>;
        ClassDefinitionFor<%-name%>.finalize = FinalizerFor<%-name%>;
        ClassDefinitionFor<%-name%>.className = "<%-name%>";

        <%-name%>ClassDef = JSClassCreate(&ClassDefinitionFor<%-name%>);

        JSClassRetain(<%-name%>ClassDef);
    }
    return <%-name%>ClassDef;
}

/**
 * called to make a native object for <%-name%>. this method must be called instead of
 * normal JSObjectMake in JavaScriptCore so that the correct prototype chain and
 * constructor will be setup.
 */
JSObjectRef MakeObjectFor<%-name%> (JSContextRef ctx, <%-instanceName%> instance)
{
    JSObjectRef object = JSObjectMake(ctx, CreateClassFor<%-name%>(), (void*)HyperloopMakePrivateObjectForPointer((void*)instance));
    JSObjectRef value = JSObjectMake(ctx, CreateClassFor<%-name%>Constructor(), 0);

    JSStringRef cproperty = JSStringCreateWithUTF8CString("constructor");
    JSObjectSetProperty(ctx, object, cproperty, value, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(cproperty);

    JSStringRef nameProperty = JSStringCreateWithUTF8CString("name");
    JSStringRef valueProperty = JSStringCreateWithUTF8CString("<%-simpleType%>");
    JSValueRef valueRef = JSValueMakeString(ctx, valueProperty);
    JSObjectSetProperty(ctx, value, nameProperty, valueRef, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(nameProperty);
    JSStringRelease(valueProperty);

    return object;
}

/**
 * called to make a native object for <%-name%>. this method must be called instead of
 * normal JSObjectMake in JavaScriptCore so that the correct prototype chain and
 * constructor will be setup.
 */
JSObjectRef MakeObjectFor<%-name%>Constructor (JSContextRef ctx)
{
    JSClassRef classRef = CreateClassFor<%-name%>Constructor();
    JSObjectRef object = JSObjectMake(ctx, classRef, 0);

    JSStringRef nameProperty = JSStringCreateWithUTF8CString("name");
    JSStringRef valueProperty = JSStringCreateWithUTF8CString("<%-simpleType%>");
    JSValueRef valueRef = JSValueMakeString(ctx, valueProperty);
    JSObjectSetProperty(ctx, object, nameProperty, valueRef, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(nameProperty);
    JSStringRelease(valueProperty);

    JSObjectRef plainObject = JSObjectMake(ctx,0,0);
    JSStringRef prototypeProperty = JSStringCreateWithUTF8CString("prototype");
    JSObjectSetProperty(ctx, object, prototypeProperty, plainObject, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(prototypeProperty);

    JSStringRef cproperty = JSStringCreateWithUTF8CString("constructor");
    JSObjectSetProperty(ctx, plainObject, cproperty, object, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(cproperty);

    return object;
}

/**
 * return a wrapped JS object instance
 */
JSValueRef Hyperloopstruct_<%-name%>ToJSValueRef (JSContextRef ctx, <%-instanceName%> instance)
{
<% if (assign) { -%>
    return MakeObjectFor<%-name%>(ctx, instance);
<% } else { -%>
    size_t len = sizeof(<%=type%>);
    <%-instanceName.replace('const ','')%> copy = malloc(len);
    if (instance!=NULL)
    {
        memcpy(copy,instance,len);
    }
    return MakeObjectFor<%-name%>(ctx, copy);
<% } -%>
}

/**
 * return a wrapped JS object instance
 */
JSValueRef Hyperloop<%-name%>ToJSValueRef (JSContextRef ctx, <%-instanceName%> instance)
{
<% if (assign) { -%>
    return MakeObjectFor<%-name%>(ctx, instance);
<% } else { -%>
    size_t len = sizeof(<%-type%>);
    <%-instanceName.replace('const ','')%> copy = malloc(len);
    if (instance!=NULL)
    {
        memcpy(copy,instance,len);
    }
    return MakeObjectFor<%-name%>(ctx, copy);
<% } -%>
}

/**
 * return an unwrapped JS object as a native instance
 */
<%-instanceName%> HyperloopJSValueRefTostruct_<%-name%> (JSContextRef ctx, JSValueRef value, JSValueRef *exception, bool *cleanup)
{
    // struct <%-name%>
    <%-instanceName%> instance = nil;
    if (JSValueIsObject(ctx,value))
    {
        JSObjectRef object = JSValueToObject(ctx,value,exception);
        if (HyperloopPrivateObjectIsType(object,JSPrivateObjectTypePointer))
        {
            instance = (<%-instanceName%>)HyperloopGetPrivateObjectAsPointer(object);
        }
    }
<% if (name==='CFStringRef') { -%>
    else {
        return (<%-instanceName%>)HyperloopToNSString(ctx,value);
    }
<% } -%>

    return instance;
}

/**
 * return an unwrapped JS object as a native instance
 */
<%-instanceName%> HyperloopJSValueRefTo<%-name%> (JSContextRef ctx, JSValueRef value, JSValueRef *exception, bool *cleanup)
{
    // <%-name%>
    <%-instanceName%> instance = nil;
    if (JSValueIsObject(ctx,value))
    {
        JSObjectRef object = JSValueToObject(ctx,value,exception);
        if (HyperloopPrivateObjectIsType(object,JSPrivateObjectTypePointer))
        {
            instance = (<%-instanceName%>)HyperloopGetPrivateObjectAsPointer(object);
        }
    }
<% if (name==='CFStringRef') { -%>
    else {
        return (<%-instanceName%>)HyperloopToNSString(ctx,value);
    }
<% } -%>

    return instance;
}

