/**
 * Copyright (c) 2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 * This generated code and related technologies are covered by patents
 * or patents pending by Appcelerator, Inc.
 */

// WARNING: this file is generated and will be overwritten
// Generated on <%=new Date%>

/**
 * JSC implementation for <%=entry.framework||''%>/<%-name%>
 */
#import "js_<%=filename%>.h"
<% imports.forEach(function(i) { -%>
@import <%=i%>;
<% }) -%>
<% _includes.forEach(function(i) { -%>
#import <%-i%>
<% }) -%>

JSClassDefinition ClassDefinitionFor<%-name%>;
JSClassDefinition ClassDefinitionFor<%-name%>Constructor;
JSClassRef <%-name%>ClassDef;
JSClassRef <%-name%>ClassDefForConstructor;

<% if (entry.superClass) { -%>
extern JSClassRef CreateClassFor<%=entry.superClass%>();
extern JSClassRef CreateClassFor<%=entry.superClass%>Constructor();
<% } -%>

JSObjectRef MakeObjectFor<%-name%> (JSContextRef ctx, <%-instanceName%> instance);

<% Object.keys(readonly_properties).sort().forEach(function(p) {
    var propobj = object.properties[p]
        code = makeGetProperty(state, object, propobj, p, 'result', varname);
-%>
/**
 * [<%-name%> <%=p%>]
 */
JSValueRef Get<%=: p | capitalize %>For<%-name%> (JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef* exception)
{
    <%-instanceName%> <%=varname%> = (<%-instanceName%>)HyperloopGetPrivateObjectAsID(object);
    <%-indentify(code,'    ')%>
}

<% }) -%>

<% Object.keys(readwrite_properties).sort().forEach(function(p) {
    var propobj = object.properties[p],
        get_code = makeGetProperty(state, object, propobj, p, 'result', varname),
        set_code = makeSetProperty(state, object, propobj, p, varname, 'argumentCount');
-%>
/**
 * [<%-name%> <%=p%>]
 */
JSValueRef Get<%=: p | capitalize %>For<%-name%> (JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef* exception)
{
    <%-instanceName%> <%=varname%> = (<%-instanceName%>)HyperloopGetPrivateObjectAsID(object);
    <%-indentify(get_code,'    ')%>
}

/**
 * [<%-name%> <%=p%>:value]
 */
bool Set<%=: p | capitalize %>For<%-name%> (JSContextRef ctx, JSObjectRef object, JSStringRef propertyName, JSValueRef value, JSValueRef* exception)
{
    <%-instanceName%> <%=varname%> = (<%-instanceName%>)HyperloopGetPrivateObjectAsID(object);
    <%-indentify(set_code,'    ')%>
    return true;
}
<% }) -%>

<% Object.keys(instance_methods).sort().forEach(function(m) {
    var ma = instance_methods[m],
        code = makeMethod(state, object, m, 'result', varname, 'arguments', 'argumentCount');
-%>
/**
 * [<%-name%> <%=ma.selector%>]
 */
JSValueRef <%=m%>For<%-name%> (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
    <%-instanceName%> <%=varname%> = (<%-instanceName%>)HyperloopGetPrivateObjectAsID(object);
    <%-indentify(code,'    ')%>
}

<% });-%>

/**
 * generic conversion from native object representation to JS string
 */
JSValueRef toStringFor<%-name%> (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
<% if (entry.metatype === 'interface') { -%>
    <%-instanceName%> <%=varname%> = (<%-instanceName%>)HyperloopGetPrivateObjectAsID(object);
<% } else { -%>
    NSString * <%=varname%> = @"<%-instanceName%>";
<% } -%>
    return HyperloopToString(ctx, <%=varname%>);
}

static JSStaticValue StaticValueArrayFor<%-name%> [] = {
<% Object.keys(readonly_properties).sort().forEach(function(p) { -%>
    { "<%=p%>", Get<%=: p | capitalize %>For<%-name%>, 0, kJSPropertyAttributeReadOnly },
<% }) -%>
<% Object.keys(readwrite_properties).sort().forEach(function(p) { -%>
    { "<%=p%>", Get<%=: p | capitalize %>For<%-name%>, Set<%=: p | capitalize %>For<%-name%>, kJSPropertyAttributeNone },
<% }) -%>
    { 0, 0, 0, 0 }
};

static JSStaticFunction StaticFunctionArrayFor<%-name%> [] = {
<% Object.keys(instance_methods).sort().forEach(function(m) {  -%>
    { "<%=m%>", <%=m%>For<%-name%>, kJSPropertyAttributeNone },
<% }) -%>
    { "toString", toStringFor<%-name%>, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontEnum | kJSPropertyAttributeDontDelete },
    { 0, 0, 0 }
};

JSObjectRef <%-name%>MakeInstance (JSContextRef ctx, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
<% if ((object.is_protocol || object.metatype=='protocol') && object.baseObject) { -%>
    <%-instanceName%> instance = nil;
<% } else if (entry.metatype==='interface') { -%>
<% if (hasMethodPrototype(metadata,entry,'init')) { %>
    <%-instanceName%> instance = [[<%=name%> alloc] init];
<% } else { %>
    <%-instanceName%> instance = [<%=name%> alloc];
<% } %>
<% } else { -%>
    id instance = nil;
<% } -%>
    JSObjectRef object = MakeObjectFor<%-name%>(ctx,instance);
    return object;
}

/**
 * called to make an instance of the <%-name%> class using the proper
 * constructor and prototype chain.  this is called when you call
 * new <%-instanceName%>()
 */
JSObjectRef MakeInstanceFor<%-name%> (JSContextRef ctx, JSObjectRef constructor, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
    return <%-name%>MakeInstance(ctx,argumentCount,arguments,exception);
}

/**
 * called to make an instance of the <%-name%> class using the proper
 * constructor and prototype chain. this is called when you call
 * <%-instanceName%>()
 */
JSValueRef MakeInstanceFromFunctionFor<%-name%> (JSContextRef ctx, JSObjectRef function, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
    return <%-name%>MakeInstance(ctx,argumentCount,arguments,exception);
}

/**
 * called when a new JS object is created for this class
 */
void InitializerFor<%-name%> (JSContextRef ctx, JSObjectRef object)
{
}

/**
 * called when the JS object is ready to be garbage collected
 */
void FinalizerFor<%-name%> (JSObjectRef object)
{
    HyperloopDestroyPrivateObject(object);
}

/**
 * type conversion from native type to JS type
 */
JSValueRef JSTypeConvertorFor<%-name%>(JSContextRef ctx, JSObjectRef object, JSType type, JSValueRef* exception)
{
    <%-instanceName%> <%=varname%> = (<%-instanceName%>)HyperloopGetPrivateObjectAsID(object);
    if (type == kJSTypeString)
    {
        return toStringFor<%-name%>(ctx,NULL,object,0,NULL,exception);
    }
<% if (entry.metatype==='interface') { -%>
    else
    {
        double value = 0;
        if ([<%=varname%> isKindOfClass:[NSNumber class]])
        {
            value = [((NSNumber*)<%=varname%>) doubleValue];
        }
        else
        {
            NSString *description = [<%=varname%> description];
            NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
            [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
            value = [[numberFormatter numberFromString:description] doubleValue];
            [numberFormatter release];
        }
        return JSValueMakeNumber(ctx, value);
    }
<% } -%>
    return NULL;
}

/**
 * called to determine if an object is of a subclass
 */
bool IsInstanceFor<%-name%> (JSContextRef ctx, JSObjectRef constructor, JSValueRef possibleInstance, JSValueRef* exception)
{
<% if (entry.metatype==='interface') { -%>
    if (HyperloopPrivateObjectIsType(constructor,JSPrivateObjectTypeID) &&
        HyperloopPrivateObjectIsType((JSObjectRef)possibleInstance,JSPrivateObjectTypeID))
    {
        id constructorObj = HyperloopGetPrivateObjectAsID(constructor);
        id possibleSubclassObj = HyperloopGetPrivateObjectAsID((JSObjectRef)possibleInstance);

        return [possibleSubclassObj isKindOfClass:[constructorObj class]];
    }
<% } -%>
    return false;
}

<% Object.keys(class_methods).sort().forEach(function(m) {
    var ma = class_methods[m],
        code = makeMethod(state, object, m, 'result', varname, 'arguments', 'argumentCount');
-%>
/**
 * [<%-name%> <%=m%>]
 */
JSValueRef <%=m%>For<%-name%>Constructor (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
    <%-instanceName%> <%=varname%> = (<%-instanceName%>)HyperloopGetPrivateObjectAsID(object);
    <%-indentify(code,'    ')%>
}

<% });-%>

static JSStaticFunction StaticFunctionArrayFor<%-name%>Constructor [] = {
<% Object.keys(class_methods).sort().forEach(function(m) {  -%>
    { "<%=m%>", <%=m%>For<%-name%>Constructor, kJSPropertyAttributeNone },
<% }) -%>
    { 0, 0, 0 }
};

/**
 * called to get the JSClassRef for <%-name%> constructor class
 */
JSClassRef CreateClassFor<%-name%>Constructor ()
{
    static bool init;
    if (!init)
    {
        init = true;

        ClassDefinitionFor<%-name%>Constructor = kJSClassDefinitionEmpty;
        ClassDefinitionFor<%-name%>Constructor.className = "<%-name%>Constructor";
        ClassDefinitionFor<%-name%>Constructor.callAsConstructor = MakeInstanceFor<%-name%>;
        ClassDefinitionFor<%-name%>Constructor.callAsFunction = MakeInstanceFromFunctionFor<%-name%>;
        ClassDefinitionFor<%-name%>Constructor.staticFunctions = StaticFunctionArrayFor<%-name%>Constructor;

    <% if (entry.superClass) { -%>
    ClassDefinitionFor<%-name%>Constructor.parentClass = CreateClassFor<%=entry.superClass%>Constructor();
    <% } -%>
    <%-name%>ClassDefForConstructor = JSClassCreate(&ClassDefinitionFor<%-name%>Constructor);

        JSClassRetain(<%-name%>ClassDefForConstructor);
    }
    return <%-name%>ClassDefForConstructor;
}

/**
 * called to get the JSClassRef for <%-name%> class
 */
JSClassRef CreateClassFor<%-name%> ()
{
    static bool init;
    if (!init)
    {
        init = true;

        ClassDefinitionFor<%-name%> = kJSClassDefinitionEmpty;
        ClassDefinitionFor<%-name%>.staticValues = StaticValueArrayFor<%-name%>;
        ClassDefinitionFor<%-name%>.staticFunctions = StaticFunctionArrayFor<%-name%>;
        ClassDefinitionFor<%-name%>.initialize = InitializerFor<%-name%>;
        ClassDefinitionFor<%-name%>.finalize = FinalizerFor<%-name%>;
        ClassDefinitionFor<%-name%>.convertToType = JSTypeConvertorFor<%-name%>;
        ClassDefinitionFor<%-name%>.className = "<%-name%>";
        ClassDefinitionFor<%-name%>.hasInstance = IsInstanceFor<%-name%>;

    <% if (entry.superClass) { -%>
    ClassDefinitionFor<%-name%>.parentClass = CreateClassFor<%=entry.superClass%>();
    <% } -%>
    <%-name%>ClassDef = JSClassCreate(&ClassDefinitionFor<%-name%>);

        JSClassRetain(<%-name%>ClassDef);
    }
    return <%-name%>ClassDef;
}

/**
 * called to make a native object for <%-name%>. this method must be called instead of
 * normal JSObjectMake in JavaScriptCore so that the correct prototype chain and
 * constructor will be setup.
 */
JSObjectRef MakeObjectFor<%-name%> (JSContextRef ctx, <%-instanceName%> instance)
{
    JSObjectRef object = JSObjectMake(ctx, CreateClassFor<%-name%>(), (void*)HyperloopMakePrivateObjectForID((JSGlobalContextRef)ctx,instance));
    JSObjectRef value = JSObjectMake(ctx, CreateClassFor<%-name%>Constructor(), 0);

    JSStringRef cproperty = JSStringCreateWithUTF8CString("constructor");
    JSObjectSetProperty(ctx, object, cproperty, value, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(cproperty);

    JSStringRef nameProperty = JSStringCreateWithUTF8CString("name");
    JSStringRef valueProperty = JSStringCreateWithUTF8CString("<%-name%>");
    JSValueRef valueRef = JSValueMakeString(ctx, valueProperty);
    JSObjectSetProperty(ctx, value, nameProperty, valueRef, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(nameProperty);
    JSStringRelease(valueProperty);

    return object;
}

/**
 * called to make a native object for <%-name%>. this method must be called instead of
 * normal JSObjectMake in JavaScriptCore so that the correct prototype chain and
 * constructor will be setup.
 */
JSObjectRef MakeObjectFor<%-name%>Constructor (JSContextRef ctx)
{
    JSClassRef classRef = CreateClassFor<%-name%>Constructor();
    JSObjectRef object = JSObjectMake(ctx, classRef, 0);

    JSStringRef nameProperty = JSStringCreateWithUTF8CString("name");
    JSStringRef valueProperty = JSStringCreateWithUTF8CString("<%-name%>");
    JSValueRef valueRef = JSValueMakeString(ctx, valueProperty);
    JSObjectSetProperty(ctx, object, nameProperty, valueRef, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(nameProperty);
    JSStringRelease(valueProperty);

    JSObjectRef plainObject = JSObjectMake(ctx,0,0);
    JSStringRef prototypeProperty = JSStringCreateWithUTF8CString("prototype");
    JSObjectSetProperty(ctx, object, prototypeProperty, plainObject, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(prototypeProperty);

    JSStringRef cproperty = JSStringCreateWithUTF8CString("constructor");
    JSObjectSetProperty(ctx, plainObject, cproperty, object, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(cproperty);

    return object;
}

/**
 * return a wrapped JS object instance
 */
JSValueRef Hyperloop<%-name%>ToJSValueRef (JSContextRef ctx, <%-instanceName%> instance)
{
    return MakeObjectFor<%-name%>(ctx, instance);
}

/**
 * return an unwrapped JS object as a native instance
 */
<%-instanceName%> HyperloopJSValueRefTo<%-name%> (JSContextRef ctx, JSValueRef value, JSValueRef *exception, bool *cleanup)
{
    if (JSValueIsObject(ctx,value))
    {
        JSObjectRef object = JSValueToObject(ctx,value,exception);
        <%-instanceName%> <%=varname%> = (<%-instanceName%>)HyperloopGetPrivateObjectAsID(object);
        return <%=varname%>;
    }
<% if (name==='NSString' || name==='CFStringRef') { -%>
    else {
        return (<%-instanceName%>)HyperloopToNSString(ctx,value);
    }
<% } else { -%>
    else
    {
        return nil;
    }
<% } -%>

}
