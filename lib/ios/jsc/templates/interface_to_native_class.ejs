/**
 * Copyright (c) 2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 * This generated code and related technologies are covered by patents
 * or patents pending by Appcelerator, Inc.
 */
<%	imports.forEach(function(name) { -%>
@import <%=name%>;
<%  }) -%>
#import <hyperloop.h>
#import "<%=filename%>"
#import <objc/runtime.h>
<% _includes.forEach(function(i) { -%>
#import <%-i%>
<% }) -%>

<%	interfaces.forEach(function(intf) {
		if (!intf.custom_class) return;
-%>
#import "js_custom_<%=intf.name%>.h"
<% }) -%>

<%	interfaces.forEach(function(intf) { -%>
extern JSObjectRef MakeObjectFor<%=intf.mangledName%>(JSContextRef, <%=intf.type%>);
<%  }) -%>

// export methods we use
<% externs.forEach(function(e){ -%>
<%- e %>
<% }) -%>

<%- code %>

/**
 * This code will attempt to resolve an id (at runtime) into a specific class wrapper
 */

@implementation HyperloopConverters

<%	interfaces.forEach(function(intf) {
	var name = intf.mangledName;
-%>

/**
 * convert <%=name%> to JSObjectRef
 */
+(JSValueRef)convert<%=name%>ToJSValueRef:(<%=name%>*)object withContext:(JSContextRef)ctx
{
    return MakeObjectFor<%=name%>(ctx, object);
}
<%  }) -%>

/**
 * called with an ID type to attempt to convert from a generic ID to a specific class
 * and return as a JSValueRef
 */
+(JSValueRef)convertIDToJSValueRef:(id)object withContext:(JSContextRef)ctx
{
	static NSMutableDictionary *classMap = nil;

	if (classMap==nil)
	{
		classMap = [[NSMutableDictionary alloc] init];
	<%	interfaces.forEach(function(e) { %>
		[classMap setObject:@"convert<%=e.mangledName%>ToJSValueRef:withContext:" forKey:@"<%=e.simpleType%>"];<%  }) %>
	}

	NSString *className = NSStringFromClass([object class]);
	NSString *selector = [classMap objectForKey:className];
	if (selector==nil)
	{
		// this should only happen if you have a class cluster (such as NSString, NSMutableString, etc)
		// and we have to walk backwards to find the appropriate cluster class in the dictionary
	    Class cls = [object class];
	    while (cls)
	    {
	    	className = NSStringFromClass(cls);
	    	selector = [classMap objectForKey:className];
	    	if (selector)
	    	{
	    		// cache it so we don't need to do this again
	    		[classMap setObject:selector forKey:className];
	    		break;
	    	}
	        cls = class_getSuperclass(cls);
	    	selector = nil;
	    }
	}
	if (selector)
	{
		SEL sel = NSSelectorFromString(selector);
		return (JSValueRef)[HyperloopConverters performSelector:sel withObject:object withObject:(void*)ctx];
	}
	return NULL;
}

@end
