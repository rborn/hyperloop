
#import <hyperloop.h>
@import Foundation;
@import JavaScriptCore;
#import "JSBuffer.h"
#import <malloc/malloc.h>
<% imports.forEach(function(i) { -%>
@import <%=i%>;
<% }) -%>
<% _includes.forEach(function(i) { -%>
#import <%-i%>
<% }) -%>


/**
 * convert <%=typeName%> to JSValueRef
 */
<% if (isPointer && isPrimitive && (!isArray || (isArray && length===0))) { -%>
JSValueRef Hyperloop<%=name%>ToJSValueRef (JSContextRef ctx, <%=type %> <%=variableName%>, size_t len)
<% } else { -%>
JSValueRef Hyperloop<%=name%>ToJSValueRef (JSContextRef ctx, <%=type %> <%=variableName%>)
<% } -%>
{
<% if (!isPointerToPointer && !isPointer) { -%>
<% if (/(int|float|short|long|double)/i.test(typeName)) { -%>
	JSValueRef <%=resultName%> = JSValueMakeNumber(ctx, (double)<%=variableName%>);
<% } else if (/bool/i.test(typeName)) { -%>
	JSValueRef <%=resultName%> = JSValueMakeBoolean(ctx, (bool)<%=variableName%>);
<% } else if (/char/i.test(typeName)) { -%>
	JSChar chars[1];
	chars[0]=(JSChar)<%=variableName%>;
	JSStringRef string = JSStringCreateWithCharacters((const JSChar*)&chars,1);
	JSValueRef <%=resultName%> = JSValueMakeString(ctx, string);
	JSStringRelease(string);
<% } else { -%>
	//TODO:
	JSValueRef <%=resultName%> = JSValueMakeUndefined(ctx);
<% } -%>
<% } else if (isPointer) { -%>
	JSBuffer *buffer = malloc(sizeof(JSBuffer));
<% if (isArray && length) { -%>
	size_t len = sizeof(<%-simpleType%>)*<%=length%>;
	buffer->length = len;
	buffer->buffer = malloc(len);
<% } else { -%>
	buffer->length = len;
	buffer->buffer = malloc(len);
<% } -%>
	memcpy(buffer->buffer,<%=variableName%>,len);
<% if (isCharArray) { -%>
	((<%=simpleType%>*)buffer->buffer)[len]='\0';
<% } -%>
	JSValueRef <%=resultName%> = MakeObjectForJSBuffer(ctx, buffer);
<% } else if (isPointerToPointer) { -%>
	//TODO: pointer to pointer
	JSValueRef <%=resultName%> = JSValueMakeUndefined(ctx);
<% } -%>
	return <%=resultName%>;
}

<% var memset = false; -%>
/**
 * convert JSValueRef to <%=typeName%>
 */
<%=type %> HyperloopJSValueRefTo<%=name %> (JSContextRef ctx, JSValueRef <%=variableName%>, JSValueRef *exception, bool *cleanup)
{
	bool set = false;
<% if (isArray) { -%>
	<% memset=true -%>
	<%=simpleType%> *<%=resultName%> = malloc(sizeof(<%=simpleType%>) * <%=length||1%>);
	*cleanup = true;
<% } else { -%>
	<%=varType%> = <%=defaultValue%>;
<% } -%>
<% if (!isPointerToPointer && !isPointer) { -%>
<% if (typeObject.is_primitive && /(int|float|short|long|double)/i.test(typeName)) { -%>
	if (JSValueIsNumber(ctx, <%=variableName%>))
	{
		<%=resultName%> = (<%=returnType%>)JSValueToNumber(ctx,<%=variableName%>,exception);
		set = true;
	}
	else if (JSValueIsObject(ctx,<%=variableName%>))
	{
		JSObjectRef <%=variableName%>$o = JSValueToObject(ctx,<%=variableName%>,0);
		if (HyperloopPrivateObjectIsType(<%=variableName%>$o,JSPrivateObjectTypeJSBuffer))
		{
			JSBuffer *buffer = HyperloopGetPrivateObjectAsJSBuffer(<%=variableName%>$o);
			<%=resultName%> = (<%=returnType%>)((<%=returnType%>*)buffer->buffer)[0];
			set = true;
		}
		else if (HyperloopPrivateObjectIsType(<%=variableName%>$o,JSPrivateObjectTypeNumber))
		{
			double value = HyperloopGetPrivateObjectAsNumber(<%=variableName%>$o);
			<%=resultName%> = (<%=returnType%>)value;
			set = true;
		}
	}
<% } else if (/bool/i.test(typeName)) { -%>
	if (JSValueIsNumber(ctx, <%=variableName%>))
	{
		<%=resultName%> = (bool)JSValueToNumber(ctx,<%=variableName%>,exception);
		set = true;
	}
	else if (JSValueIsBoolean(ctx, <%=variableName%>))
	{
		<%=resultName%> = (bool)JSValueToBoolean(ctx,<%=variableName%>);
		set = true;
	}
	else if (JSValueIsObject(ctx,<%=variableName%>))
	{
		JSObjectRef <%=variableName%>$o = JSValueToObject(ctx,<%=variableName%>,0);
		if (HyperloopPrivateObjectIsType(<%=variableName%>$o,JSPrivateObjectTypeJSBuffer))
		{
			JSBuffer *buffer = HyperloopGetPrivateObjectAsJSBuffer(<%=variableName%>$o);
			<%=resultName%> = (<%=returnType%>)((<%=returnType%>*)buffer->buffer)[0];
			set = true;
		}
		else if (HyperloopPrivateObjectIsType(<%=variableName%>$o,JSPrivateObjectTypeNumber))
		{
			double value = HyperloopGetPrivateObjectAsNumber(<%=variableName%>$o);
			<%=resultName%> = (<%=returnType%>)value;
			set = true;
		}
	}
<% } else if (/char/i.test(typeName)) { -%>
	if (JSValueIsString(ctx, <%=variableName%>))
	{
		JSStringRef str = JSValueToStringCopy(ctx,<%=variableName%>,exception);
		const JSChar *ch = JSStringGetCharactersPtr(str);
		<%=resultName%> = (<%=simpleType%>)ch[0];
		set = true;
		JSStringRelease(str);
	}
	else if (JSValueIsObject(ctx,<%=variableName%>))
	{
		JSObjectRef <%=variableName%>$o = JSValueToObject(ctx,<%=variableName%>,0);
		if (HyperloopPrivateObjectIsType(<%=variableName%>$o,JSPrivateObjectTypeJSBuffer))
		{
			JSBuffer *buffer = HyperloopGetPrivateObjectAsJSBuffer(<%=variableName%>$o);
			<%=resultName%> = (<%=returnType%>)((<%=returnType%>*)buffer->buffer)[0];
			set = true;
		}
		else if (HyperloopPrivateObjectIsType(<%=variableName%>$o,JSPrivateObjectTypeNumber))
		{
			double value = HyperloopGetPrivateObjectAsNumber(<%=variableName%>$o);
			<%=resultName%> = (<%=returnType%>)value;
			set = true;
		}
	}
	else if (JSValueIsNumber(ctx,<%=variableName%>))
	{
		<%=resultName%> = (<%=returnType%>)JSValueToNumber(ctx,<%=variableName%>,0);
		set = true;
	}
	else if (JSValueIsBoolean(ctx,<%=variableName%>))
	{
		<%=resultName%> = (<%=returnType%>)JSValueToBoolean(ctx,<%=variableName%>);
		set = true;
	}
<% } else { -%>
<% } -%>
<% } else if (isPointer) { -%>
<% if (/(int|float|short|long|double)/i.test(typeName)) { -%>
	if (JSValueIsNumber(ctx,<%=variableName%>))
	{
<% if (!isArray) { -%>
		<%=resultName%> = malloc(sizeof(<%=simpleType%>));
		*cleanup=true;
<% } -%>
		<%=resultName%>[0] = (<%=simpleType%>)JSValueToNumber(ctx,<%=variableName%>,exception);
		set = true;
	}
	else if (JSValueIsObject(ctx,<%=variableName%>))
	{
		JSObjectRef <%=variableName%>$o = JSValueToObject(ctx,<%=variableName%>,0);
		if (HyperloopPrivateObjectIsType(<%=variableName%>$o,JSPrivateObjectTypeJSBuffer))
		{
			JSBuffer *buffer = HyperloopGetPrivateObjectAsJSBuffer(<%=variableName%>$o);
<% if (memset) { -%>
			memcpy(<%=resultName%>, buffer->buffer, buffer->length);
<% } else { -%>
			<%=resultName%> = (<%=returnType%>)buffer->buffer;
<% } -%>
			set = true;
		}
		else if (HyperloopPrivateObjectIsType(<%=variableName%>$o,JSPrivateObjectTypePointer))
		{
			<%=resultName%> = (<%=returnType%>)HyperloopGetPrivateObjectAsPointer(<%=variableName%>$o);
			set = true;
		}
	}
<% } else if (/bool/i.test(typeName)) { -%>
	if (JSValueIsBoolean(ctx,<%=variableName%>))
	{
<% if (!isArray) { -%>
		<%=resultName%> = malloc(sizeof(<%=simpleType%>));
		*cleanup=true;
<% } -%>
		<%=resultName%>[0] = (<%=simpleType%>)JSValueToBoolean(ctx,<%=variableName%>);
		set = true;
	}
	else if (JSValueIsObject(ctx,<%=variableName%>))
	{
		JSObjectRef <%=variableName%>$o = JSValueToObject(ctx,<%=variableName%>,0);
		if (HyperloopPrivateObjectIsType(<%=variableName%>$o,JSPrivateObjectTypeJSBuffer))
		{
			JSBuffer *buffer = HyperloopGetPrivateObjectAsJSBuffer(<%=variableName%>$o);
<% if (memset) { -%>
			memcpy(<%=resultName%>, buffer->buffer, buffer->length);
<% } else { -%>
			<%=resultName%> = (<%=returnType%>)buffer->buffer;
<% } -%>
			set = true;
		}
		else if (HyperloopPrivateObjectIsType(<%=variableName%>$o,JSPrivateObjectTypePointer))
		{
			<%=resultName%> = (<%=returnType%>)HyperloopGetPrivateObjectAsPointer(<%=variableName%>$o);
		}
	}
<% } else if (/char/i.test(typeName)) { -%>
	if (JSValueIsString(ctx, <%=variableName%>))
	{
		JSStringRef str = JSValueToStringCopy(ctx,<%=variableName%>,exception);
		size_t size = JSStringGetMaximumUTF8CStringSize(str);
<% if (!isArray) { -%>
		<% memset=true -%>
		<%=resultName%> = (<%=returnType%>)malloc(sizeof(char)*size);
		*cleanup = true;
<% } else { -%>
		if (size > <%=length%>)
		{
			size = <%=length%>;
		}
<% } -%>
		size = JSStringGetUTF8CString(str,(char*)<%=resultName%>,size);
		<%=resultName%>[size]='\0';
		set = true;
		JSStringRelease(str);
	}
	else if (JSValueIsObject(ctx,<%=variableName%>))
	{
		JSObjectRef <%=variableName%>$o = JSValueToObject(ctx,<%=variableName%>,0);
		if (HyperloopPrivateObjectIsType(<%=variableName%>$o,JSPrivateObjectTypeJSBuffer))
		{
			JSBuffer *buffer = HyperloopGetPrivateObjectAsJSBuffer(<%=variableName%>$o);
			<%=resultName%> = (<%=returnType%>)buffer->buffer;
			set = true;
		}
		else if (HyperloopPrivateObjectIsType(<%=variableName%>$o,JSPrivateObjectTypePointer))
		{
			<%=resultName%> = (<%=returnType%>)HyperloopGetPrivateObjectAsPointer(<%=variableName%>$o);
		}
	}
<% } -%>
<% } else if (isPointerToPointer) { -%>
	// FIXME: pointer to pointer not implemented yet!
<% } -%>
	else if (JSValueIsUndefined(ctx,<%=variableName%>) || JSValueIsNull(ctx,<%=variableName%>))
	{
		set = true;
	}
	if (!set)
	{
		HyperloopMakeException(ctx,"invalid type",exception);
<% if (memset) { -%>
		if ((*cleanup))
		{
			free(<%=resultName%>);
			<%=resultName%> = NULL;
			*cleanup = false;
		}
<% } -%>
	}
	return <%=resultName%>;
}
