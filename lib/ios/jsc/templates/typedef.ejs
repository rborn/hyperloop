/**
 * Copyright (c) 2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 * This generated code and related technologies are covered by patents
 * or patents pending by Appcelerator, Inc.
 */

// WARNING: this file is generated and will be overwritten
// Generated on <%=new Date%>

@import JavaScriptCore;
<% if (object.object.framework) { -%>
@import <%=object.object.framework%>;
<% } -%>
#import <hyperloop.h>

/**
 * JSC implementation for struct <%-name%>
 */
#import "js_<%=name%>.h"


JSClassDefinition ClassDefinitionFor<%-name%>;
JSClassDefinition ClassDefinitionFor<%-name%>Constructor;
JSClassRef <%-name%>ClassDef;
JSClassRef <%-name%>ClassDefForConstructor;


/**
 * generic conversion from native object representation to JS string
 */
JSValueRef toStringFor<%-name%> (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
<% if (!object.is_primitive || object.is_pointer || object.is_pointer_to_pointer) { -%>
<% if (object.name==='id') { -%>
    id value = HyperloopGetPrivateObjectAsID(object);
    return HyperloopToString(ctx, [value description]);
<% } else if (object.name==='Class') { -%>
    Class cls = HyperloopGetPrivateObjectAsClass(object);
    return HyperloopToString(ctx, NSStringFromClass(cls));
<% } else if (object.name==='SEL') { -%>
    SEL selector = (SEL)HyperloopGetPrivateObjectAsPointer(object);
    return HyperloopToString(ctx, NSStringFromSelector(selector));
<% } else { -%>
    return HyperloopToString(ctx, @"<%-simpleType%>");
<% } -%>
<% } else { -%>
    double value = HyperloopGetPrivateObjectAsNumber(object);
    return HyperloopToString(ctx, [NSNumber numberWithDouble:value]);
<% } -%>
}

static JSStaticFunction StaticFunctionArrayFor<%-name%> [] = {
    { "toString", toStringFor<%-name%>, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontEnum | kJSPropertyAttributeDontDelete },
    { 0, 0, 0 }
};


<% if (object.is_primitive && !object.is_pointer && !object.is_pointer_to_pointer) { -%>
/**
 * type conversion from native type to JS type
 */
JSValueRef JSTypeConvertorFor<%-name%>(JSContextRef ctx, JSObjectRef object, JSType type, JSValueRef* exception)
{
    if (type == kJSTypeString)
    {
        return toStringFor<%-name%>(ctx,NULL,object,0,NULL,exception);
    }
    else
    {
        double value = HyperloopGetPrivateObjectAsNumber(object);
        return JSValueMakeNumber(ctx, value);
    }
    return NULL;
}
<% } -%>

/**
 * called when the JS object is ready to be garbage collected
 */
void FinalizerFor<%-name%> (JSObjectRef object)
{
    HyperloopDestroyPrivateObject(object);
}

/**
 * called to get the JSClassRef for <%-name%> constructor class
 */
JSClassRef CreateClassFor<%-name%>Constructor ()
{
    static bool init;
    if (!init)
    {
        init = true;

        ClassDefinitionFor<%-name%>Constructor = kJSClassDefinitionEmpty;
        ClassDefinitionFor<%-name%>Constructor.className = "<%-simpleType%>Constructor";

        <%-name%>ClassDefForConstructor = JSClassCreate(&ClassDefinitionFor<%-name%>Constructor);

        JSClassRetain(<%-name%>ClassDefForConstructor);
    }
    return <%-name%>ClassDefForConstructor;
}

/**
 * called to get the JSClassRef for <%-name%> class
 */
JSClassRef CreateClassFor<%-name%> ()
{
    static bool init;
    if (!init)
    {
        init = true;

        ClassDefinitionFor<%-name%> = kJSClassDefinitionEmpty;
<% if (object.is_primitive && !object.is_pointer && !object.is_pointer_to_pointer) { -%>
        ClassDefinitionFor<%-name%>.convertToType = JSTypeConvertorFor<%-name%>;
<% } -%>
        ClassDefinitionFor<%-name%>.staticFunctions = StaticFunctionArrayFor<%-name%>;
        ClassDefinitionFor<%-name%>.finalize = FinalizerFor<%-name%>;
        ClassDefinitionFor<%-name%>.className = "<%-simpleType%>";

        <%-name%>ClassDef = JSClassCreate(&ClassDefinitionFor<%-name%>);

        JSClassRetain(<%-name%>ClassDef);
    }
    return <%-name%>ClassDef;
}

/**
 * called to make a native object for <%-name%>. this method must be called instead of
 * normal JSObjectMake in JavaScriptCore so that the correct prototype chain and
 * constructor will be setup.
 */
JSObjectRef MakeObjectFor<%-name%> (JSContextRef ctx, <%-instanceName%> instance)
{
<% if (!object.is_primitive || object.is_pointer || object.is_pointer_to_pointer) { -%>
<% if (object.name==='id') { -%>
    JSObjectRef object = JSObjectMake(ctx, CreateClassFor<%-name%>(), (void*)HyperloopMakePrivateObjectForID(ctx,instance));
<% } else if (object.name==='Class') { -%>
    JSObjectRef object = JSObjectMake(ctx, CreateClassFor<%-name%>(), (void*)HyperloopMakePrivateObjectForClass(instance));
<% } else { -%>
    JSObjectRef object = JSObjectMake(ctx, CreateClassFor<%-name%>(), (void*)HyperloopMakePrivateObjectForPointer((void*)instance));
<% } -%>
<% } else { -%>
    JSObjectRef object = JSObjectMake(ctx, CreateClassFor<%-name%>(), (void*)HyperloopMakePrivateObjectForNumber(instance));
<% } -%>
    JSObjectRef value = JSObjectMake(ctx, CreateClassFor<%-name%>Constructor(), 0);

    JSStringRef cproperty = JSStringCreateWithUTF8CString("constructor");
    JSObjectSetProperty(ctx, object, cproperty, value, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(cproperty);

    JSStringRef nameProperty = JSStringCreateWithUTF8CString("name");
    JSStringRef valueProperty = JSStringCreateWithUTF8CString("<%-simpleType%>");
    JSValueRef valueRef = JSValueMakeString(ctx, valueProperty);
    JSObjectSetProperty(ctx, value, nameProperty, valueRef, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(nameProperty);
    JSStringRelease(valueProperty);

    return object;
}

/**
 * called to make a native object for <%-name%>. this method must be called instead of
 * normal JSObjectMake in JavaScriptCore so that the correct prototype chain and
 * constructor will be setup.
 */
JSObjectRef MakeObjectFor<%-name%>Constructor (JSContextRef ctx)
{
    JSClassRef classRef = CreateClassFor<%-name%>Constructor();
    JSObjectRef object = JSObjectMake(ctx, classRef, 0);

    JSStringRef nameProperty = JSStringCreateWithUTF8CString("name");
    JSStringRef valueProperty = JSStringCreateWithUTF8CString("<%-simpleType%>");
    JSValueRef valueRef = JSValueMakeString(ctx, valueProperty);
    JSObjectSetProperty(ctx, object, nameProperty, valueRef, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(nameProperty);
    JSStringRelease(valueProperty);

    JSObjectRef plainObject = JSObjectMake(ctx,0,0);
    JSStringRef prototypeProperty = JSStringCreateWithUTF8CString("prototype");
    JSObjectSetProperty(ctx, object, prototypeProperty, plainObject, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(prototypeProperty);

    JSStringRef cproperty = JSStringCreateWithUTF8CString("constructor");
    JSObjectSetProperty(ctx, plainObject, cproperty, object, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(cproperty);

    return object;
}

/**
 * return a wrapped JS object instance
 */
JSValueRef Hyperloop<%-name%>ToJSValueRef (JSContextRef ctx, <%-instanceName%> instance)
{
    return MakeObjectFor<%-name%>(ctx, instance);
}

/**
 * return an unwrapped JS object as a native instance
 */
<%-instanceName%> HyperloopJSValueRefTo<%-name%> (JSContextRef ctx, JSValueRef value, JSValueRef *exception, bool *cleanup)
{
<% if (!object.is_primitive || object.is_pointer || object.is_pointer_to_pointer) { -%>
    JSObjectRef object = NULL;
    if (JSValueIsObject(ctx,value))
    {
        object = JSValueToObject(ctx,value,exception);
    }
<% if (object.is_void) { -%>
    else if (JSValueIsNumber(ctx,value))
    {
        double d = JSValueToNumber(ctx,value,exception);
        return (<%-instanceName%>)(long)d;
    }
    else if (JSValueIsBoolean(ctx,value))
    {
        bool b = JSValueToBoolean(ctx,value);
        return (<%-instanceName%>)b;
    }
    else if (JSValueIsString(ctx,value))
    {
        JSStringRef stringRef = JSValueToStringCopy(ctx, value, 0);
        size_t buflen = JSStringGetMaximumUTF8CStringSize(stringRef);
        char *buf = malloc(buflen);
        buflen = JSStringGetUTF8CString(stringRef, buf, buflen);
        buf[buflen] = '\0';
        JSStringRelease(stringRef);
        *cleanup = true;
        return (<%-instanceName%>)buf;
    }
<% } -%>
<% if (object.name==='id') { -%>
    id instance = HyperloopGetPrivateObjectAsID(object);
<% } else if (object.name==='Class') { -%>
    Class instance = HyperloopGetPrivateObjectAsClass(object);
<% } else { -%>
    <%-instanceName%> instance = nil;
    if (object!=NULL && HyperloopPrivateObjectIsType(object,JSPrivateObjectTypePointer))
    {
        instance = (<%-instanceName%>)HyperloopGetPrivateObjectAsPointer(object);
    }
    else if (object!=NULL && HyperloopPrivateObjectIsType(object,JSPrivateObjectTypeJSBuffer))
    {
        JSBuffer *buffer = HyperloopGetPrivateObjectAsJSBuffer(object);
        instance = (<%-instanceName%>)(buffer->buffer);
    }
<% } -%>
    return instance;
<% } else { -%>
    if (JSValueIsNumber(ctx,value))
    {
        return (<%=instanceName%>)JSValueToNumber(ctx,value,exception);
    }
    if (JSValueIsObject(ctx,value))
    {
        JSObjectRef object = JSValueToObject(ctx,value,exception);
        if (HyperloopPrivateObjectIsType(object,JSPrivateObjectTypeNumber))
        {
            return (<%=instanceName%>)HyperloopGetPrivateObjectAsNumber(object);
        }
        if (HyperloopPrivateObjectIsType(object,JSPrivateObjectTypeJSBuffer))
        {
            JSBuffer *buffer = HyperloopGetPrivateObjectAsJSBuffer(object);
            if (buffer->length >= sizeof(<%=object.object.type%>))
            {
                <%=object.object.type%> * value = (<%=object.object.type%> *)(buffer->buffer);
<% if (object.is_pointer) { -%>
return (<%-instanceName%>*)value;
<% } else { -%>
                return (<%-instanceName%>)value[0];
<% } -%>
            }
        }
    }
    return NAN;
<% } -%>
}

