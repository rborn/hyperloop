/**
 * example on how to create memory in various ways using array of values
 */
var size_of_char     = 1;
var size_of_bool     = 1;
var size_of_short    = 2;
var size_of_int      = 4;
var size_of_float    = 4;
var size_of_long     = 4;
var size_of_double   = 8;
var size_of_longlong = 8;

function assert (value, test, msg) {
	console.log(
		(value ? '\033[32m✓\033[39m\033[0m ' : '\033[31m✘\033[39m\033[0m') + 
		'  ' + test + ' ' +
		(!value ? ('\t(received: '+msg+')') : '')
	);
}

// 2 x 2 x 2 multi-dimensional array
var m = @memory([
	[ [1,2], [1,2] ],
	[ [1,2], [1,2] ]
]);

assert(m.length===(2*2*2*size_of_float), "2 x 2 x 2 array length", m.length);
assert(m.isNaN()===false, "2 x 2 x 2 array NaN", m.isNaN());

// 2 x 2 multi-dimensional array
m = @memory([
	[1,2],
	[2,1]
]);

assert(m.length===(2*2*size_of_float), "2 x 2 array length", m.length);
assert(m.isNaN()===false, "2 x 2 array NaN", m.isNaN());


// single-dimension array
m = @memory([
    0.5, -0.5, -0.5, 1.0, 0.0, 0.0,	1.0, 0.0,
]);

assert(m.length===(8*size_of_float), "single dimension array length", m.length)
assert(m.isNaN()===false, "single dimension array NaN", m.isNaN());
assert(m.toFloat(0)==0.5, "single dimension array index 0", m.toFloat(0));
assert(m.toFloat(1)==-0.5, "single dimension array index 1", m.toFloat(1));
assert(m.toFloat(2)==-0.5, "single dimension array index 2", m.toFloat(2));
assert(m.toFloat(3)==1.0, "single dimension array index 3", m.toFloat(3));
assert(m.toFloat(4)==0.0, "single dimension array index 4", m.toFloat(4));
assert(m.toFloat(5)==0.0, "single dimension array index 5", m.toFloat(5));
assert(m.toFloat(6)==1.0, "single dimension array index 6", m.toFloat(6));
assert(m.toFloat(7)==0.0, "single dimension array index 7", m.toFloat(7));


// no size, should be initialized to an int array with length of 1 and value of 0
m = @memory();

assert(m.length===(1*size_of_float), "@memory() length", m.length);
assert(m.isNaN()===true, "@memory() NaN", m.isNaN());

// specific size
m = @memory(10);

assert(m.length===(10), "@memory(10) length", m.length);
assert(m.isNaN()===true, "@memory(10) NaN", m.isNaN());

// ASCII character
m = @memory();
m.putString("abcdefg");
assert(m.length===(7), "ASCII character length", m.length);

// Unicode character
m = @memory();
m.putString("こんにちは世界");
assert(m.length===(21), "Unicode character length", m.length);

// Grow to specific size
m = @memory();
m.grow(10 * size_of_float);
assert(m.length===(10 * size_of_float), "@memory.grow(10)", m.length);

// Grow float test
m.putFloat(1.0, 10);
assert(m.length===(11 * size_of_float), "@memory.putFloat(1.0, 11)", m.length);

// Grow float test
m.putFloat(1.0, 15);
assert(m.length===(16 * size_of_float), "@memory.putFloat(1.0, 15)", m.length);

// Grow int buffer
m = @memory();
m.growInt(10);
assert(m.length===(10 * size_of_int), "@memory.growInt(10)", m.length);

// Grow float buffer
m = @memory();
m.growFloat(10);
assert(m.length===(10 * size_of_float), "@memory.growFloat(10)", m.length);

// Grow double buffer
m = @memory();
m.growDouble(10);
assert(m.length===(10 * size_of_double), "@memory.growDouble(10)", m.length);

// Grow short buffer
m = @memory();
m.growShort(10);
assert(m.length===(10 * size_of_short), "@memory.growShort(10)", m.length);

// Grow long buffer
m = @memory();
m.growLong(10);
assert(m.length===(10 * size_of_long), "@memory.growLong(10)", m.length);

// Grow long long buffer
m = @memory();
m.growLongLong(10);
assert(m.length===(10 * size_of_longlong), "@memory.growLongLong(10)", m.length);

// Grow bool buffer
m = @memory();
m.growBool(10);
assert(m.length===(10 * size_of_bool), "@memory.growBool(10)", m.length);

// Grow char buffer
m = @memory();
m.growChar(10);
assert(m.length===(10 * size_of_char), "@memory.growChar(10)", m.length);


