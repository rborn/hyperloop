@import('Foundation/NSLog');
@import('Foundation/NSString');
@import('Foundation/NSTimer');
@import('Foundation/NSRunLoop');
@import('Foundation/NSDefaultRunLoopMode');
@import('Foundation/NSDate');
@import('Foundation/NSSelectorFromString');
@import('UIKit/UIApplication');
@import('UIKit/UIColor');
@import('UIKit/UIScreen');
@import('UIKit/UIView');
@import('UIKit/UILabel');
@import('UIKit/NSTextAlignmentCenter');
@import('CoreGraphics/CGRectMake');
@import('QuartzCore/CADisplayLink');

var CELL_SIZE, FPS_INTERVAL;
if (typeof HYPERLOOP_XSMALL !== 'undefined') {
	CELL_SIZE = 1;
	FPS_INTERVAL = 10;
} else if (typeof HYPERLOOP_SMALL !== 'undefined') {
	CELL_SIZE = 4;
	FPS_INTERVAL = 60;
} else {
	CELL_SIZE = 20;
	FPS_INTERVAL = 60;
}

const screenSize = UIScreen.mainScreen().bounds.size,
	height = screenSize.height,
	width = screenSize.width,
	xSize = width / CELL_SIZE,
	ySize = height / CELL_SIZE;

// shorthand for using NSLog
var __ = NSString.stringWithUTF8String;
var console = {
	log: function(s) { NSLog(__('%@'), s); },
	debug: function(s) { DEBUG && console.log(s); }
};

// output raw dimensions
console.log(width + ' x ' + height);

// TODO: move these definitions to their own modules
// set the FPS and rendering functions based on CLI args
var getFPS, render, lastTime;
if (typeof HYPERLOOP_LINK !== 'undefined') {
	lastTime = 0;
	getFPS = function(sender) {
		var fps = 1.0 / (sender.timestamp - lastTime);
		lastTime = sender.timestamp;
		return fps;
	};
	render = function(callback) {
		console.debug('>>>>> Using CADisplayLink for render loop <<<<<');

		// create a display link, using the render loop update function
		var displayLink = CADisplayLink.displayLinkWithTarget(callback, NSSelectorFromString('update:'));

		// attach the display link to the main run loop
		displayLink.addToRunLoop(NSRunLoop.mainRunLoop(), NSDefaultRunLoopMode);
	};
} else {
	lastTime = NSDate.date();
	getFPS = function(sender) {
		var fps = 1.0 / -lastTime.timeIntervalSinceNow();
		lastTime = NSDate.date();
		return fps;
	};
	render = function(callback) {
		console.debug('>>>>> Using NSTimer for render loop <<<<<');

		// launch timer with TimerCallback as its target/selector
		var timer = NSTimer.scheduledTimerWithTimeInterval(
			1.0/100.0, callback, NSSelectorFromString('update:'), null, true);
	};
}

// calculate the next state of each cell
function getNextState(x, y, alive) {
	var count = 0,
		xm1 = x > 0,
		xp1 = x+1 < xSize,
		ym1 = y > 0,
		yp1 = y+1 < ySize;

	if (xm1) {
		if (ym1 && cells[x-1][y-1].lastAlive) { count++; }
		if (cells[x-1][y].lastAlive) { count++; }
		if (yp1 && cells[x-1][y+1].lastAlive) { count++; }
	}
	if (xp1) {
		if (ym1 && cells[x+1][y-1].lastAlive) { count++; }
		if (cells[x+1][y].lastAlive) { count++; }
		if (yp1 && cells[x+1][y+1].lastAlive) { count++; }
	}
	if (ym1 && cells[x][y-1].lastAlive) { count++; }
	if (yp1 && cells[x][y+1].lastAlive) { count++; }

	return (alive && (count === 2 || count === 3)) || (!alive && count === 3);
}

// the render function
var ctr = 0;
function update(params) {
	var x, y, cell;

	// render current generation
	for (x = 0; x < xSize; x++) {
		for (y = 0; y < ySize; y++) {
			cell = cells[x][y];

			// minimze number of times we need to modify the proxy object
			if (cell.alive !== cell.lastAlive) {
				cell.proxy.setHidden(!cell.alive);
			}

			// save the state
			cell.lastAlive = cell.alive;
		}
	}

	// build next generation
	for (x = 0; x < xSize; x++) {
		for (y = 0; y < ySize; y++) {
			cell = cells[x][y];
			cell.alive = getNextState(x, y, cell.lastAlive);
		}
	}

	// show the average FPS
	if (!(++ctr % FPS_INTERVAL)) {
		ctr = 1;
		label.setText(__('FPS: ' + Math.round(FPS_INTERVAL*10*getFPS(params.sender))/10));
	}

}

// START UI CONSTRUCTION

// configure main window
var keyWindow = UIApplication.sharedApplication().keyWindow;
keyWindow.backgroundColor = UIColor.blackColor();

// seed the grid
var cells = [];
for (var x = 0; x < xSize; x++) {

	cells[x] = [];
	for (var y = 0; y < ySize; y++) {
		// determine whether or not this cell is alive
		var alive = Math.random() >= 0.5;

		// create a native UIView
		var cellProxy = new UIView();
		cellProxy.frame = CGRectMake(x*CELL_SIZE, y*CELL_SIZE, CELL_SIZE, CELL_SIZE);
		cellProxy.backgroundColor = UIColor.whiteColor();
		cellProxy.setHidden(!alive);

		// save the cell
		cells[x][y] = {
			proxy: cellProxy,
			lastAlive: alive,
			alive: alive
		};

		// add the cell to the window
		keyWindow.addSubview(cellProxy);
	}
}

// add FPS label
var label = new UILabel();
label.frame = CGRectMake(0, 0, 100, 40);
label.backgroundColor = UIColor.colorWithRed(180/255, 0, 0, 0.8);
label.textColor = UIColor.whiteColor();
label.textAlignment = NSTextAlignmentCenter;
label.setText(__('FPS: '));
keyWindow.addSubview(label);

// RENDER LOOP

// Implement a class for our render loop update
@class('RenderCallback', NSObject, [], [
	{
		name: 'update',
		returnType: 'void',
		arguments: [{type:'id',name:'sender'}],
		action: update
	}
]);

// Let's do this
render(new RenderCallback());
